/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg1312084.pkg1312110;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import pkg1312084.pkg1312110.DCrypto;

/**
 *
 * @author WinDuy 7
 */
public class main_GUI extends javax.swing.JFrame {

    /**
     * Creates new form jFrame
     */
    PrivateKey mainPrivateKey = null;
    PublicKey mainPublicKey = null;
    //KeyPair mainKeyPair;
    public main_GUI() {
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jFileChooser1 = new javax.swing.JFileChooser();
        FileChooser = new javax.swing.JFileChooser();
        FileChooser2 = new javax.swing.JFileChooser();
        FileChooser3 = new javax.swing.JFileChooser();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        CommandLine = new javax.swing.JTextArea();
        KeySizeBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        InputFileField = new javax.swing.JTextField();
        FileButton_1 = new javax.swing.JButton();
        FileButton_2 = new javax.swing.JButton();
        OutputFileField = new javax.swing.JTextField();
        ExportPublic = new javax.swing.JButton();
        EncryptButton = new javax.swing.JButton();
        DecryptButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ExportPrivate = new javax.swing.JButton();
        ImportPublicKey = new javax.swing.JButton();
        ImportPrivateKey = new javax.swing.JButton();
        CreateKeyPairButton = new javax.swing.JButton();
        SignButton = new javax.swing.JButton();
        VerifyButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jTextField1.setText("jTextField1");

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        CommandLine.setEditable(false);
        CommandLine.setBackground(new java.awt.Color(0, 0, 0));
        CommandLine.setColumns(20);
        CommandLine.setForeground(new java.awt.Color(0, 255, 0));
        CommandLine.setLineWrap(true);
        CommandLine.setRows(5);
        CommandLine.setWrapStyleWord(true);
        CommandLine.setAutoscrolls(false);
        jScrollPane1.setViewportView(CommandLine);

        KeySizeBox.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        KeySizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeySizeBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Điền keysize");

        InputFileField.setEditable(false);
        InputFileField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        InputFileField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputFileFieldActionPerformed(evt);
            }
        });

        FileButton_1.setText("...");
        FileButton_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileButton_1ActionPerformed(evt);
            }
        });

        FileButton_2.setText("...");
        FileButton_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileButton_2ActionPerformed(evt);
            }
        });

        OutputFileField.setEditable(false);
        OutputFileField.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        OutputFileField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputFileFieldActionPerformed(evt);
            }
        });

        ExportPublic.setText("Export Public Key");
        ExportPublic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportPublicActionPerformed(evt);
            }
        });

        EncryptButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        EncryptButton.setText("Encrypt");
        EncryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptButtonActionPerformed(evt);
            }
        });

        DecryptButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        DecryptButton.setText("Decrypt");
        DecryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Input File");

        jLabel4.setText("Output File");

        ExportPrivate.setText("Export Private Key");
        ExportPrivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportPrivateActionPerformed(evt);
            }
        });

        ImportPublicKey.setText("ImportPublicKey");
        ImportPublicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportPublicKeyActionPerformed(evt);
            }
        });

        ImportPrivateKey.setText("ImportPrivateKey");
        ImportPrivateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportPrivateKeyActionPerformed(evt);
            }
        });

        CreateKeyPairButton.setText("Create RSA Key Pair");
        CreateKeyPairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateKeyPairButtonActionPerformed(evt);
            }
        });

        SignButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SignButton.setText("Sign");
        SignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignButtonActionPerformed(evt);
            }
        });

        VerifyButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        VerifyButton.setText("Verify");
        VerifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerifyButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        MenuBar.add(jMenu1);

        jMenu2.setText("Edit");
        MenuBar.add(jMenu2);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(7, 7, 7)
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(KeySizeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(ExportPublic, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CreateKeyPairButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ExportPrivate, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(InputFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                                    .addComponent(OutputFileField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FileButton_1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FileButton_2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                                .addComponent(ImportPublicKey)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(VerifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ImportPrivateKey))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(EncryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DecryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(InputFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FileButton_1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(FileButton_2)
                                    .addComponent(OutputFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ImportPublicKey)
                            .addComponent(ImportPrivateKey))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DecryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EncryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(VerifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(KeySizeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ExportPublic)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ExportPrivate))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CreateKeyPairButton)
                                .addGap(50, 50, 50)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        EncryptButton.getAccessibleContext().setAccessibleName("EncryptButton");
        DecryptButton.getAccessibleContext().setAccessibleName("DecryptButton");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void KeySizeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeySizeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KeySizeBoxActionPerformed

    private void InputFileFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFileFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputFileFieldActionPerformed

    private void OutputFileFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputFileFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputFileFieldActionPerformed

    private void FileButton_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileButton_1ActionPerformed
        // TODO add your handling code here:
        //Handle open button action.
        if (evt.getSource() == FileButton_1) 
        {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(main_GUI.this);

            if (returnVal == fc.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                InputFileField.setText(file.getPath());
            } 
            else 
            {

            }
       }
    }//GEN-LAST:event_FileButton_1ActionPerformed

    private void FileButton_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileButton_2ActionPerformed
        // TODO add your handling code here:
        //Handle open button action.
        if (evt.getSource() == FileButton_2) 
        {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showSaveDialog(main_GUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                OutputFileField.setText(file.getPath());
            } 
            else 
            {

            }
       }
    }//GEN-LAST:event_FileButton_2ActionPerformed

    private void EncryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptButtonActionPerformed
        try {
            if("".equals(InputFileField.getText()) || "".equals(OutputFileField.getText()))
            {
                CommandLine.append("\nInvalid input....");
                return;
            }
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            long startTime = System.currentTimeMillis();
            CommandLine.append("\n" + sdf.format(startTime) + " - Begin encrypting file...");
            boolean result = false;
            result = DCrypto.RSAEncryptFile(mainPublicKey, InputFileField.getText(), OutputFileField.getText());
            long endTime = System.currentTimeMillis();
            if(result == true)
                CommandLine.append("\n" + sdf.format(endTime) + " - Encryption completed. ^^");
            else
                CommandLine.append("\n" + sdf.format(endTime) + " - Encryption failed...");
        } catch (IOException ex) {
            Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EncryptButtonActionPerformed

    private void ExportPublicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportPublicActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == ExportPublic) 
        {
            JFileChooser fc = new JFileChooser();
            if(mainPublicKey == null)
            {
                CommandLine.append("\nPlease create public key first!!!!\n");
                return;
            }
            int returnVal = fc.showSaveDialog(main_GUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) 
            {
                DCrypto.exportPublicKey(mainPublicKey, fc.getSelectedFile().getPath()); 
                CommandLine.append("\nExported public key\n");
            } 
            else 
            {

            }
       }
    }//GEN-LAST:event_ExportPublicActionPerformed

    private void ExportPrivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportPrivateActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == ExportPrivate) 
        {
            JFileChooser fc = new JFileChooser();
            if(mainPrivateKey == null)
            {
                CommandLine.append("\nPlease create private key first!!!!\n");
                return;
            }
            int returnVal = fc.showSaveDialog(main_GUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) 
            {
                DCrypto.exportPrivateKey(mainPrivateKey, fc.getSelectedFile().getPath());
                CommandLine.append("\nExported private key\n");
            } 
            else 
            {

            }
       }
    }//GEN-LAST:event_ExportPrivateActionPerformed

    private void ImportPublicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportPublicKeyActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == ImportPublicKey) 
        {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(main_GUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                mainPublicKey = DCrypto.importPublicKey(file.getPath());
                CommandLine.append("\n=====Imported public key=====");
                CommandLine.append("\n" + DCrypto.keyToString(mainPublicKey));
                CommandLine.append("\n=======End public key========");
            } 
            else 
            {

            }
       }
    }//GEN-LAST:event_ImportPublicKeyActionPerformed

    private void ImportPrivateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportPrivateKeyActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == ImportPrivateKey) 
        {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(main_GUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                mainPrivateKey = DCrypto.importPrivateKey(file.getPath());
                CommandLine.append("\n=====Imported private key=====");
                CommandLine.append("\n" + DCrypto.keyToString(mainPrivateKey));
                CommandLine.append("\n=======End private key========");
            } 
            else 
            {

            }
       }
    }//GEN-LAST:event_ImportPrivateKeyActionPerformed

    private void DecryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptButtonActionPerformed
        // TODO add your handling code here:
        if("".equals(InputFileField.getText()) || "".equals(OutputFileField.getText()))
        {
            CommandLine.append("Invalid input....");
            return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        long startTime = System.currentTimeMillis();
        CommandLine.append("\n" + sdf.format(startTime) + " - Begin decrypting file...");
        boolean result = false;
        result = DCrypto.RSADecryptFile(mainPrivateKey, InputFileField.getText(), OutputFileField.getText());
        long endTime = System.currentTimeMillis();
        if(result == true)
            CommandLine.append("\n" + sdf.format(endTime) + " - Decryption completed. ^^");
        else 
            CommandLine.append("\n" + sdf.format(endTime) + " - Decryption failed...");
    }//GEN-LAST:event_DecryptButtonActionPerformed

    private void CreateKeyPairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateKeyPairButtonActionPerformed
        // TODO add your handling code here:
                if(KeySizeBox.getText().equals(""))
        {
            CommandLine.append("\nError: Empty keysize!!!!\n");
            return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        int keySize = Integer.parseInt(KeySizeBox.getText());
        
        if(keySize < 768 || keySize > 16384)
        {
            CommandLine.append("\nInvalid key size! Key size must be between 768 and 16384 bits");
            return;
        }
        if(keySize % 8 != 0)
        {
            CommandLine.append("\nKey size must divisible by 8!!!");
            return;
        }
        
        long startTime = System.currentTimeMillis();
        CommandLine.append("\nGenerating RSA Key Pair at " + sdf.format(startTime));
        
        KeyPair keyPair = DCrypto.createRSAKeyPair(keySize);
        mainPublicKey = keyPair.getPublic();
        mainPrivateKey = keyPair.getPrivate();

        long endTime = System.currentTimeMillis();
        CommandLine.append("\nFinished at " + sdf.format(endTime));
        CommandLine.append("\n=========Public key==========\n" + DCrypto.keyToString(mainPublicKey) );
        CommandLine.append("\n========End public key=======");
        CommandLine.append("\n\n=========Private key=========\n" + DCrypto.keyToString(mainPrivateKey) );
        CommandLine.append("\n========End private key======");
    }//GEN-LAST:event_CreateKeyPairButtonActionPerformed

    private void SignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignButtonActionPerformed
        // TODO add your handling code here:
        try 
        {
            String algorithm = "SHA-256";
            if("".equals(InputFileField.getText()))
            {
                CommandLine.append("Invalid input....");
                return;
            }
            if(mainPrivateKey == null)
            {
                CommandLine.append("\nError: Empty private key!\nPlease import private key!");
                return;
            }
            OutputFileField.setText(InputFileField.getText().concat(".sig"));
            
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            long startTime = System.currentTimeMillis();
            CommandLine.append("\n" + sdf.format(startTime) + " - Begin signing file...");
            boolean result = false;
            
            String hashString = DCrypto.digestFile(InputFileField.getText(), algorithm);
            CommandLine.append("\nHash String: " + hashString);
            String signature = DCrypto.signMess(mainPrivateKey, hashString);
            CommandLine.append("\nSignature created: " + signature);
            
            if("".equals(hashString) || "".equals(signature))
            {
                long endTime = System.currentTimeMillis();
                CommandLine.append("\n" + sdf.format(endTime) + " - Signing failed...");
                return;
            }
            
            
            File signatureFile = new File(OutputFileField.getText());
            signatureFile.createNewFile();
            PrintWriter writer = new PrintWriter(signatureFile);
            writer.println(signature);
            writer.close();
            
            CommandLine.append("\nSignature file " + OutputFileField.getText() + " has been created.");
            long endTime = System.currentTimeMillis();
            CommandLine.append("\n" + sdf.format(endTime) + " - Signing completed.");
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SignButtonActionPerformed

    private void VerifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerifyButtonActionPerformed
        try 
        {
            // TODO add your handling code here:
            if("".equals(InputFileField.getText()))
            {
                CommandLine.append("Invalid input....");
                return;
            }
            if(mainPublicKey == null)
            {
                CommandLine.append("\nError: Empty public key!\nPlease import public key!");
                return;
            }
            String originFile = InputFileField.getText();
            String signatureFile = originFile + ".sig";
            OutputFileField.setText(signatureFile);
            File testFile = new File(signatureFile);
            if(testFile.exists())
            {
                CommandLine.append("\nChecked. Signature file exist.");
            }
            else
            {
                CommandLine.append("\nSignature file does not exist.");
                return;
            }
            
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            long startTime = System.currentTimeMillis();
            CommandLine.append("\n" + sdf.format(startTime) + " - Begin verifying file...");
            boolean result = false;
            
            String signature = "";
            FileReader fd = null;
            try
            {
                fd = new FileReader(testFile);
            }
            catch (FileNotFoundException ex)
            {
                Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader bf = new BufferedReader(fd);
            signature = bf.readLine();
            
            result = DCrypto.verifySign(mainPublicKey, originFile, signature);
            
            long endTime = System.currentTimeMillis();
            
            if(result == true)
                CommandLine.append("\n" + sdf.format(endTime) +" Signatured verified! ^^");
            else
                CommandLine.append("\n" + sdf.format(endTime) +" Signature doesn't match....");
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_VerifyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CommandLine;
    private javax.swing.JButton CreateKeyPairButton;
    private javax.swing.JButton DecryptButton;
    private javax.swing.JButton EncryptButton;
    private javax.swing.JButton ExportPrivate;
    private javax.swing.JButton ExportPublic;
    private javax.swing.JButton FileButton_1;
    private javax.swing.JButton FileButton_2;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JFileChooser FileChooser2;
    private javax.swing.JFileChooser FileChooser3;
    private javax.swing.JButton ImportPrivateKey;
    private javax.swing.JButton ImportPublicKey;
    private javax.swing.JTextField InputFileField;
    private javax.swing.JTextField KeySizeBox;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JTextField OutputFileField;
    private javax.swing.JButton SignButton;
    private javax.swing.JButton VerifyButton;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
