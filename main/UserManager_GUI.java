/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import DCrypto.*;
import Users.*;
import Users.GUI.AddContact_GUI;
import Users.GUI.ModifyUser_GUI;
import Users.GUI.Passphrase_GUI;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Quang Dai
 */
public class UserManager_GUI extends javax.swing.JFrame {

    /**
     * Creates new form UserManage_GUI
     */
    PrivateKey mainPrivateKey = null;
    PublicKey mainPublicKey = null;
    KeyPair mainKeyPair = null;
    String tempPubKey = null;
    String tempEmail = null;
    
    public UserManager_GUI(String temp) throws IOException, ParserConfigurationException, SAXException {
        initComponents();
        this.pathdir = temp;
        this.GetData(this.pathdir);
        this.SetInf(this.pathdir);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EditUserButton = new javax.swing.JButton();
        DeleteUserButton = new javax.swing.JButton();
        popUpMenu = new javax.swing.JPopupMenu();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        EditContact = new javax.swing.JMenuItem();
        DeleteContact = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        ExportContactInfo = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        ContactsPane = new javax.swing.JPanel();
        ScrollUserPane = new javax.swing.JScrollPane();
        UserTable = new javax.swing.JTable();
        UserOperationPane = new javax.swing.JPanel();
        AddContactButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        TabbedPane = new javax.swing.JTabbedPane();
        AccountPane = new javax.swing.JPanel();
        AccountInfo = new javax.swing.JPanel();
        HoTenLabel = new javax.swing.JLabel();
        EmailLabel = new javax.swing.JLabel();
        AddrLabel = new javax.swing.JLabel();
        PhoneLabel = new javax.swing.JLabel();
        DoBLabel = new javax.swing.JLabel();
        ExportInfoButton = new javax.swing.JButton();
        UpdateAccButton = new javax.swing.JButton();
        NameField = new javax.swing.JTextField();
        EmailTextField = new javax.swing.JTextField();
        PhoneTextField = new javax.swing.JTextField();
        AddrTextField = new javax.swing.JTextField();
        PasswordLabel = new javax.swing.JLabel();
        PasswordField = new javax.swing.JPasswordField();
        DoBTextField = new javax.swing.JFormattedTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jButton3 = new javax.swing.JButton();
        KeyPairInfo = new javax.swing.JPanel();
        PublicKeyScrollPane = new javax.swing.JScrollPane();
        PublicKeyArea = new javax.swing.JTextArea();
        PrivateKeyScrollPane = new javax.swing.JScrollPane();
        PrivateKeyArea = new javax.swing.JTextArea();
        KeySizeComboBox1 = new javax.swing.JComboBox<>();
        CreateKeyPairButton1 = new javax.swing.JButton();
        SaveKeyPairToAccount = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        EncryptTab = new javax.swing.JPanel();
        KeyInfoPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PublicKeyTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        AlgorithmField = new javax.swing.JTextField();
        KeyOwnerField = new javax.swing.JTextField();
        KeySizeField = new javax.swing.JTextField();
        FileInfoPane = new javax.swing.JPanel();
        OutputFileField_Sym = new javax.swing.JTextField();
        InputFileField_Sym = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        BrowseInputFile = new javax.swing.JButton();
        BrowseOutputFile = new javax.swing.JButton();
        SessionKeyInfoPane = new javax.swing.JPanel();
        SymAlgoComboBox = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        PadSchemeComboBox = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        ModOpComboBox = new javax.swing.JComboBox<>();
        EncryptButton = new javax.swing.JButton();
        VerifyButton = new javax.swing.JButton();
        DecryptTab = new javax.swing.JPanel();
        KeyInfoPane1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        CommandLine_Sym1 = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        AlgorithmField1 = new javax.swing.JTextField();
        KeyOwnerField1 = new javax.swing.JTextField();
        KeySizeField1 = new javax.swing.JTextField();
        LoadYourPrivateKey = new javax.swing.JButton();
        FileInfoPane1 = new javax.swing.JPanel();
        OutputFileField_Sym1 = new javax.swing.JTextField();
        InputFileField_Sym1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        BrowseInputFile1 = new javax.swing.JButton();
        BrowseOutputFile1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        SignButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        Help = new javax.swing.JMenu();
        About = new javax.swing.JMenu();

        EditUserButton.setText("Modify");
        EditUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditUserButtonActionPerformed(evt);
            }
        });

        DeleteUserButton.setText("Delete");
        DeleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteUserButtonActionPerformed(evt);
            }
        });

        popUpMenu.add(jSeparator3);

        EditContact.setText("Edit contact");
        EditContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditContactActionPerformed(evt);
            }
        });
        popUpMenu.add(EditContact);
        EditContact.getAccessibleContext().setAccessibleName("popEditUser");

        DeleteContact.setText("Delete contact");
        DeleteContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteContactActionPerformed(evt);
            }
        });
        popUpMenu.add(DeleteContact);
        DeleteContact.getAccessibleContext().setAccessibleName("pop");

        popUpMenu.add(jSeparator2);

        ExportContactInfo.setText("Export contact");
        ExportContactInfo.setActionCommand("");
        ExportContactInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportContactInfoActionPerformed(evt);
            }
        });
        popUpMenu.add(ExportContactInfo);
        popUpMenu.add(jSeparator5);

        ContactsPane.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ScrollUserPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Contacts Info"));

        UserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Họ tên", "Email", "Public Key", "SĐT", "Địa chỉ", "Ngày sinh"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UserTable.setColumnSelectionAllowed(true);
        UserTable.setPreferredSize(new java.awt.Dimension(200, 200));
        UserTable.setRowHeight(25);
        UserTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UserTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                UserTableMousePressed(evt);
            }
        });
        ScrollUserPane.setViewportView(UserTable);
        UserTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (UserTable.getColumnModel().getColumnCount() > 0) {
            UserTable.getColumnModel().getColumn(0).setResizable(false);
            UserTable.getColumnModel().getColumn(1).setResizable(false);
            UserTable.getColumnModel().getColumn(2).setResizable(false);
            UserTable.getColumnModel().getColumn(3).setResizable(false);
            UserTable.getColumnModel().getColumn(4).setResizable(false);
            UserTable.getColumnModel().getColumn(5).setResizable(false);
        }

        UserOperationPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Operation"));

        AddContactButton.setText("Add Contact");
        AddContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddContactButtonActionPerformed(evt);
            }
        });

        RefreshButton.setText("Refresh contacts");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserOperationPaneLayout = new javax.swing.GroupLayout(UserOperationPane);
        UserOperationPane.setLayout(UserOperationPaneLayout);
        UserOperationPaneLayout.setHorizontalGroup(
            UserOperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserOperationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AddContactButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        UserOperationPaneLayout.setVerticalGroup(
            UserOperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserOperationPaneLayout.createSequentialGroup()
                .addGroup(UserOperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddContactButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ContactsPaneLayout = new javax.swing.GroupLayout(ContactsPane);
        ContactsPane.setLayout(ContactsPaneLayout);
        ContactsPaneLayout.setHorizontalGroup(
            ContactsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContactsPaneLayout.createSequentialGroup()
                .addComponent(ScrollUserPane, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(ContactsPaneLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(UserOperationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ContactsPaneLayout.setVerticalGroup(
            ContactsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContactsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollUserPane, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserOperationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Keys Manager");
        setResizable(false);
        setSize(new java.awt.Dimension(900, 530));

        TabbedPane.setDoubleBuffered(true);
        TabbedPane.setMaximumSize(new java.awt.Dimension(800, 440));
        TabbedPane.setMinimumSize(new java.awt.Dimension(800, 440));
        TabbedPane.setPreferredSize(new java.awt.Dimension(900, 500));

        AccountInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Your Infomation"));

        HoTenLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        HoTenLabel.setText("Họ Tên:");

        EmailLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        EmailLabel.setText("Email:");

        AddrLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AddrLabel.setText("Địa chỉ:");

        PhoneLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PhoneLabel.setText("SDT:");

        DoBLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        DoBLabel.setText("DoB");

        ExportInfoButton.setText("Export account info");
        ExportInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportInfoButtonActionPerformed(evt);
            }
        });

        UpdateAccButton.setText("Update account info");
        UpdateAccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateAccButtonActionPerformed(evt);
            }
        });

        NameField.setEditable(false);
        NameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameFieldActionPerformed(evt);
            }
        });

        EmailTextField.setEditable(false);
        EmailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmailTextFieldActionPerformed(evt);
            }
        });

        PhoneTextField.setEditable(false);

        AddrTextField.setEditable(false);

        PasswordLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PasswordLabel.setText("Password:");

        PasswordField.setEditable(false);
        PasswordField.setText("jPasswordField1");

        DoBTextField.setEditable(false);

        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AccountInfoLayout = new javax.swing.GroupLayout(AccountInfo);
        AccountInfo.setLayout(AccountInfoLayout);
        AccountInfoLayout.setHorizontalGroup(
            AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountInfoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AccountInfoLayout.createSequentialGroup()
                        .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AccountInfoLayout.createSequentialGroup()
                                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EmailLabel)
                                    .addComponent(PasswordLabel)
                                    .addComponent(HoTenLabel)
                                    .addComponent(DoBLabel)
                                    .addComponent(PhoneLabel)
                                    .addComponent(AddrLabel))
                                .addGap(31, 31, 31)
                                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(PhoneTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DoBTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PasswordField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EmailTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NameField)
                                    .addComponent(AddrTextField)))
                            .addGroup(AccountInfoLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(UpdateAccButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ExportInfoButton)
                                .addGap(23, 23, 23)))
                        .addContainerGap())
                    .addComponent(jSeparator4)))
            .addGroup(AccountInfoLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        AccountInfoLayout.setVerticalGroup(
            AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HoTenLabel)
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmailLabel)
                    .addComponent(EmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordLabel)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DoBLabel)
                    .addComponent(DoBTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhoneLabel)
                    .addComponent(PhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddrLabel)
                    .addComponent(AddrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateAccButton)
                    .addComponent(ExportInfoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(36, 36, 36))
        );

        KeyPairInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Key Pair Info"));

        PublicKeyScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Public Key"));
        PublicKeyScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        PublicKeyScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        PublicKeyArea.setEditable(false);
        PublicKeyArea.setColumns(20);
        PublicKeyArea.setLineWrap(true);
        PublicKeyArea.setRows(5);
        PublicKeyScrollPane.setViewportView(PublicKeyArea);

        PrivateKeyScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Private Key"));
        PrivateKeyScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        PrivateKeyScrollPane.setToolTipText("");
        PrivateKeyScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        PrivateKeyArea.setEditable(false);
        PrivateKeyArea.setColumns(20);
        PrivateKeyArea.setLineWrap(true);
        PrivateKeyArea.setRows(5);
        PrivateKeyScrollPane.setViewportView(PrivateKeyArea);

        KeySizeComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "768", "1024", "2048", "3072", "4096", "8192" }));
        KeySizeComboBox1.setAutoscrolls(true);
        KeySizeComboBox1.setDoubleBuffered(true);
        KeySizeComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeySizeComboBox1ActionPerformed(evt);
            }
        });

        CreateKeyPairButton1.setText("Create RSA Key Pair");
        CreateKeyPairButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateKeyPairButton1ActionPerformed(evt);
            }
        });

        SaveKeyPairToAccount.setText("Save this key pair to your account");
        SaveKeyPairToAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveKeyPairToAccountActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Keysize:");

        javax.swing.GroupLayout KeyPairInfoLayout = new javax.swing.GroupLayout(KeyPairInfo);
        KeyPairInfo.setLayout(KeyPairInfoLayout);
        KeyPairInfoLayout.setHorizontalGroup(
            KeyPairInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyPairInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(KeyPairInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(KeyPairInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(PublicKeyScrollPane)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, KeyPairInfoLayout.createSequentialGroup()
                            .addGap(469, 469, 469)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, KeyPairInfoLayout.createSequentialGroup()
                            .addGroup(KeyPairInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CreateKeyPairButton1)
                                .addGroup(KeyPairInfoLayout.createSequentialGroup()
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(KeySizeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(30, 30, 30)
                            .addComponent(SaveKeyPairToAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(PrivateKeyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        KeyPairInfoLayout.setVerticalGroup(
            KeyPairInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyPairInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PublicKeyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(KeyPairInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(KeyPairInfoLayout.createSequentialGroup()
                        .addComponent(PrivateKeyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(KeyPairInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(KeyPairInfoLayout.createSequentialGroup()
                                .addComponent(CreateKeyPairButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(KeyPairInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(KeySizeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(SaveKeyPairToAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout AccountPaneLayout = new javax.swing.GroupLayout(AccountPane);
        AccountPane.setLayout(AccountPaneLayout);
        AccountPaneLayout.setHorizontalGroup(
            AccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AccountInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KeyPairInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        AccountPaneLayout.setVerticalGroup(
            AccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountPaneLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(AccountInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
            .addComponent(KeyPairInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        TabbedPane.addTab("Your Account", AccountPane);

        KeyInfoPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Public key info"));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        PublicKeyTextArea.setColumns(20);
        PublicKeyTextArea.setLineWrap(true);
        PublicKeyTextArea.setRows(5);
        PublicKeyTextArea.setWrapStyleWord(true);
        PublicKeyTextArea.setAutoscrolls(false);
        PublicKeyTextArea.setCaretColor(new java.awt.Color(255, 255, 255));
        PublicKeyTextArea.setDoubleBuffered(true);
        jScrollPane2.setViewportView(PublicKeyTextArea);

        jLabel3.setText("Algorithm:");

        jLabel9.setText("Key owner:");

        jLabel12.setText("Key size:");

        AlgorithmField.setEditable(false);
        AlgorithmField.setText("RSA");

        KeyOwnerField.setEditable(false);
        KeyOwnerField.setText("<email@abc.com>");

        KeySizeField.setEditable(false);

        javax.swing.GroupLayout KeyInfoPaneLayout = new javax.swing.GroupLayout(KeyInfoPane);
        KeyInfoPane.setLayout(KeyInfoPaneLayout);
        KeyInfoPaneLayout.setHorizontalGroup(
            KeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyInfoPaneLayout.createSequentialGroup()
                .addGroup(KeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(KeyInfoPaneLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(KeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(KeyInfoPaneLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(24, 24, 24)
                                .addComponent(KeySizeField))
                            .addGroup(KeyInfoPaneLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(AlgorithmField))
                            .addGroup(KeyInfoPaneLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(12, 12, 12)
                                .addComponent(KeyOwnerField))))
                    .addGroup(KeyInfoPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)))
                .addContainerGap())
        );
        KeyInfoPaneLayout.setVerticalGroup(
            KeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyInfoPaneLayout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addGap(18, 18, 18)
                .addGroup(KeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(KeyOwnerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(KeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AlgorithmField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(KeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(KeySizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        FileInfoPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Encryptor"));

        OutputFileField_Sym.setEditable(false);
        OutputFileField_Sym.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        OutputFileField_Sym.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputFileField_SymActionPerformed(evt);
            }
        });

        InputFileField_Sym.setEditable(false);
        InputFileField_Sym.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        InputFileField_Sym.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputFileField_SymActionPerformed(evt);
            }
        });

        jLabel5.setText("Input File");

        jLabel6.setText("Output File");

        BrowseInputFile.setText("...");
        BrowseInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseInputFileActionPerformed(evt);
            }
        });

        BrowseOutputFile.setText("...");
        BrowseOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseOutputFileActionPerformed(evt);
            }
        });

        SessionKeyInfoPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Session key"));

        SymAlgoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AES", "Blowfish" }));

        jLabel13.setText("Symmetric Algorithm:");

        jLabel15.setText("Padding scheme:");

        PadSchemeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PKCS5Padding", "ISO10126Padding" }));
        PadSchemeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PadSchemeComboBoxActionPerformed(evt);
            }
        });

        jLabel16.setText("Mode of Operation:");

        ModOpComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CBC", "OFB", "CFB", "PCBC" }));

        javax.swing.GroupLayout SessionKeyInfoPaneLayout = new javax.swing.GroupLayout(SessionKeyInfoPane);
        SessionKeyInfoPane.setLayout(SessionKeyInfoPaneLayout);
        SessionKeyInfoPaneLayout.setHorizontalGroup(
            SessionKeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SessionKeyInfoPaneLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(SessionKeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel13)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(SessionKeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ModOpComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SymAlgoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PadSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SessionKeyInfoPaneLayout.setVerticalGroup(
            SessionKeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SessionKeyInfoPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SessionKeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(SymAlgoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(SessionKeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(ModOpComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(SessionKeyInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PadSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addContainerGap())
        );

        EncryptButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        EncryptButton.setText("Encrypt");
        EncryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptButtonActionPerformed(evt);
            }
        });

        VerifyButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        VerifyButton.setText("Verify");
        VerifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerifyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FileInfoPaneLayout = new javax.swing.GroupLayout(FileInfoPane);
        FileInfoPane.setLayout(FileInfoPaneLayout);
        FileInfoPaneLayout.setHorizontalGroup(
            FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileInfoPaneLayout.createSequentialGroup()
                .addGroup(FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FileInfoPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(SessionKeyInfoPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(FileInfoPaneLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(OutputFileField_Sym, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .addComponent(InputFileField_Sym))
                        .addGap(18, 18, 18)
                        .addGroup(FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BrowseInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BrowseOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(FileInfoPaneLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(EncryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(VerifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FileInfoPaneLayout.setVerticalGroup(
            FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileInfoPaneLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FileInfoPaneLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(InputFileField_Sym, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BrowseInputFile))
                    .addGroup(FileInfoPaneLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OutputFileField_Sym, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BrowseOutputFile))))
                .addGap(46, 46, 46)
                .addComponent(SessionKeyInfoPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(FileInfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(EncryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VerifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout EncryptTabLayout = new javax.swing.GroupLayout(EncryptTab);
        EncryptTab.setLayout(EncryptTabLayout);
        EncryptTabLayout.setHorizontalGroup(
            EncryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EncryptTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(KeyInfoPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(FileInfoPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        EncryptTabLayout.setVerticalGroup(
            EncryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EncryptTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EncryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(KeyInfoPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FileInfoPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Encryptor - Verifier", EncryptTab);

        KeyInfoPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Private key info"));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        CommandLine_Sym1.setColumns(20);
        CommandLine_Sym1.setLineWrap(true);
        CommandLine_Sym1.setRows(5);
        CommandLine_Sym1.setWrapStyleWord(true);
        CommandLine_Sym1.setAutoscrolls(false);
        CommandLine_Sym1.setCaretColor(new java.awt.Color(255, 255, 255));
        CommandLine_Sym1.setDoubleBuffered(true);
        jScrollPane3.setViewportView(CommandLine_Sym1);

        jLabel17.setText("Algorithm:");

        jLabel18.setText("Key owner:");

        jLabel19.setText("Key size:");

        AlgorithmField1.setEditable(false);
        AlgorithmField1.setText("RSA");

        KeyOwnerField1.setEditable(false);
        KeyOwnerField1.setText("<email@abc.com>");

        KeySizeField1.setEditable(false);

        LoadYourPrivateKey.setText("Load your private key");
        LoadYourPrivateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadYourPrivateKeyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout KeyInfoPane1Layout = new javax.swing.GroupLayout(KeyInfoPane1);
        KeyInfoPane1.setLayout(KeyInfoPane1Layout);
        KeyInfoPane1Layout.setHorizontalGroup(
            KeyInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyInfoPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(KeyInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addGap(12, 12, 12)
                .addGroup(KeyInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LoadYourPrivateKey)
                    .addGroup(KeyInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(KeySizeField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AlgorithmField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(KeyOwnerField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        KeyInfoPane1Layout.setVerticalGroup(
            KeyInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyInfoPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(KeyInfoPane1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(KeyInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(AlgorithmField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(KeyInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(KeyOwnerField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(KeyInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(KeySizeField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(LoadYourPrivateKey)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FileInfoPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Decryptor"));

        OutputFileField_Sym1.setEditable(false);
        OutputFileField_Sym1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        OutputFileField_Sym1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputFileField_Sym1ActionPerformed(evt);
            }
        });

        InputFileField_Sym1.setEditable(false);
        InputFileField_Sym1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        InputFileField_Sym1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputFileField_Sym1ActionPerformed(evt);
            }
        });

        jLabel20.setText("Input File");

        jLabel21.setText("Output File");

        BrowseInputFile1.setText("...");
        BrowseInputFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseInputFile1ActionPerformed(evt);
            }
        });

        BrowseOutputFile1.setText("...");
        BrowseOutputFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseOutputFile1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        SignButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SignButton.setText("Sign");
        SignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FileInfoPane1Layout = new javax.swing.GroupLayout(FileInfoPane1);
        FileInfoPane1.setLayout(FileInfoPane1Layout);
        FileInfoPane1Layout.setHorizontalGroup(
            FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FileInfoPane1Layout.createSequentialGroup()
                .addGroup(FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(FileInfoPane1Layout.createSequentialGroup()
                        .addContainerGap(148, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(SignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))
                    .addGroup(FileInfoPane1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InputFileField_Sym1)
                            .addComponent(OutputFileField_Sym1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BrowseInputFile1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseOutputFile1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
        FileInfoPane1Layout.setVerticalGroup(
            FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileInfoPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FileInfoPane1Layout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(InputFileField_Sym1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BrowseInputFile1))
                    .addGroup(FileInfoPane1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OutputFileField_Sym1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BrowseOutputFile1))))
                .addGap(18, 18, 18)
                .addGroup(FileInfoPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout DecryptTabLayout = new javax.swing.GroupLayout(DecryptTab);
        DecryptTab.setLayout(DecryptTabLayout);
        DecryptTabLayout.setHorizontalGroup(
            DecryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DecryptTabLayout.createSequentialGroup()
                .addComponent(KeyInfoPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 76, Short.MAX_VALUE))
            .addGroup(DecryptTabLayout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(FileInfoPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DecryptTabLayout.setVerticalGroup(
            DecryptTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DecryptTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(KeyInfoPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FileInfoPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        TabbedPane.addTab("Decryptor - Signer", DecryptTab);

        Help.setText("Help");
        MenuBar.add(Help);

        About.setText("About");
        MenuBar.add(About);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 13, Short.MAX_VALUE)
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        TabbedPane.getAccessibleContext().setAccessibleName("Users");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteUserButtonActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_DeleteUserButtonActionPerformed

    private void EditUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditUserButtonActionPerformed
        // TODO add your handling code here:

//            ModifyAccount_GUI window = new ModifyAccount_GUI();
//            window.show();
           
    }//GEN-LAST:event_EditUserButtonActionPerformed

    private void EditContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditContactActionPerformed
        // TODO add your handling code here:
        int index = this.UserTable.getSelectedRow();
        TableModel model = this.UserTable.getModel();
        String name = model.getValueAt(index, 0).toString();
        String email = model.getValueAt(index, 1).toString();
        String pub = model.getValueAt(index, 2).toString();
        String dob = model.getValueAt(index, 3).toString();
        String phone = model.getValueAt(index, 4).toString();
        String add = model.getValueAt(index, 5).toString();
        ModifyUser_GUI window = new ModifyUser_GUI(this.pathdir,name, email, pub, dob, phone, add);
        window.setVisible(true);
    }//GEN-LAST:event_EditContactActionPerformed

    private void DeleteContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteContactActionPerformed
        // TODO add your handling code here:
        int index = this.UserTable.getSelectedRow();
        TableModel model = this.UserTable.getModel();
        String email = model.getValueAt(index, 1).toString();
        User user = new User();
        try {
            user.Delete(this.pathdir, email);
            this.GetData(pathdir);
        } catch (SAXException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeleteContactActionPerformed

    private void ExportContactInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportContactInfoActionPerformed
        // TODO add your handling code here:
        int index = this.UserTable.getSelectedRow();
        TableModel model = this.UserTable.getModel();
        String email = model.getValueAt(index, 1).toString();
        
        User user = new User();
        try {
            user.ExportInf(email, this.pathdir + "\\Database.xml");
        } catch (SAXException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ExportContactInfoActionPerformed

    private void SignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            //Thuat toan dc set cung o day la SHA-256
            String hashAlgo = "SHA-256";
            if("".equals(InputFileField_Sym1.getText()))
            {
                //CommandLine.append("Invalid input....");
                JOptionPane.showMessageDialog(null, "Invalid input...", "ERROR!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(mainPrivateKey == null)
            {
                //CommandLine.append("\nError: Empty private key!\nPlease import private key!");
                JOptionPane.showMessageDialog(null, "Empty private key!\\nPlease import private key!", "ERROR!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            OutputFileField_Sym1.setText(InputFileField_Sym1.getText().concat(".sig"));

            //SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            //long startTime = System.currentTimeMillis();
            //CommandLine.append("\n" + sdf.format(startTime) + " - Begin signing file...");
            boolean result = false;

            String hashString = DCrypto.digestFile(InputFileField_Sym1.getText(), hashAlgo);
            System.out.println("\nHash String: " + hashString);
            String signature = DCrypto.signMess(mainPrivateKey, hashString);
            System.out.println("\nSignature created: " + signature);

            if("".equals(hashString) || "".equals(signature))
            {
                long endTime = System.currentTimeMillis();
                //CommandLine.append("\n" + sdf.format(endTime) + " - Signing failed...");
                JOptionPane.showMessageDialog(null, "Signing failed...", "ERROR!", JOptionPane.ERROR_MESSAGE);
                return;
            }

            File signatureFile = new File(OutputFileField_Sym1.getText());
            signatureFile.createNewFile();
            PrintWriter writer = new PrintWriter(signatureFile);
            writer.println(signature);
            writer.close();

            //CommandLine.append("\nSignature file " + OutputFileField.getText() + " has been created.");
            //long endTime = System.currentTimeMillis();
            //CommandLine.append("\n" + sdf.format(endTime) + " - Signing completed.");
            JOptionPane.showMessageDialog(null, "Signature file " + OutputFileField_Sym1.getText() + " has been created.", "Completed!", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (IOException ex)
        {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SignButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            String cipherFile = InputFileField_Sym1.getText();
            String plainFile = OutputFileField_Sym1.getText();
            DCrypto.symDecryptFileAdvanced(mainPrivateKey, cipherFile, plainFile);
        }
        catch (IOException ex)
        {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void BrowseOutputFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseOutputFile1ActionPerformed
        // TODO add your handling code here:
        //Handle open button action.
        if (evt.getSource() == BrowseOutputFile1)
        {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(UserManager_GUI.this);

            if (returnVal == fc.APPROVE_OPTION)
            {
                File file = fc.getSelectedFile();
                OutputFileField_Sym1.setText(file.getPath());
            }
            else
            {

            }
        }
    }//GEN-LAST:event_BrowseOutputFile1ActionPerformed

    private void BrowseInputFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseInputFile1ActionPerformed
        // TODO add your handling code here:
        //Handle open button action.
        if (evt.getSource() == BrowseInputFile1)
        {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(UserManager_GUI.this);

            if (returnVal == fc.APPROVE_OPTION)
            {
                File file = fc.getSelectedFile();
                InputFileField_Sym1.setText(file.getPath());
            }
            else
            {

            }
        }
    }//GEN-LAST:event_BrowseInputFile1ActionPerformed

    private void InputFileField_Sym1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFileField_Sym1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputFileField_Sym1ActionPerformed

    private void OutputFileField_Sym1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputFileField_Sym1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputFileField_Sym1ActionPerformed

    private void LoadYourPrivateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadYourPrivateKeyActionPerformed
        // TODO add your handling code here:
        if(mainPrivateKey != null)
        CommandLine_Sym1.setText(DCrypto.keyToString(mainPrivateKey));
        else
        JOptionPane.showMessageDialog(null, "Please create your keypair first!", "ERROR!", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_LoadYourPrivateKeyActionPerformed

    private void VerifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerifyButtonActionPerformed
        try
        {
            // TODO add your handling code here:
            if("".equals(InputFileField_Sym.getText()))
            {
                //CommandLine.append("Invalid input....");
                JOptionPane.showMessageDialog(null, "Invalid input...", "ERROR!", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //DCrypto.DCrypto.class.
            if(mainPublicKey == null)
            {
                //CommandLine.append("\nError: Empty public key!\nPlease import public key!");
                JOptionPane.showMessageDialog(null, "Empty public key!\nPlease import public key!", "ERROR!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String originFile = InputFileField_Sym.getText();
            String signatureFile = originFile + ".sig";
            OutputFileField_Sym.setText(signatureFile);
            File testFile = new File(signatureFile);
            if(testFile.exists())
            {
                //CommandLine.append("\nChecked. Signature file exist.");
                //JOptionPane.showMessageDialog(null, "Checked. Signature file exist.", "ERROR!", JOptionPane.ERROR_MESSAGE);
                System.out.println("\nChecked. Signature file exist.");
            }
            else
            {
                //CommandLine.append("\nSignature file does not exist.");
                //JOptionPane.showMessageDialog(null, "Checked. Signature file does not exist.", "ERROR!", JOptionPane.ERROR_MESSAGE);
                System.out.println("\nChecked. Signature file does not exist.");
                return;
            }

            //SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            //long startTime = System.currentTimeMillis();
            //CommandLine.append("\n" + sdf.format(startTime) + " - Begin verifying file...");
            boolean result = false;

            String signature = "";
            FileReader fd = null;
            try
            {
                fd = new FileReader(testFile);
            }
            catch (FileNotFoundException ex)
            {
                Logger.getLogger(DCrypto.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader bf = new BufferedReader(fd);
            signature = bf.readLine();

            result = DCrypto.verifySign(mainPublicKey, originFile, signature);

            //long endTime = System.currentTimeMillis();

            if(result == true)
            //CommandLine.append("\n" + sdf.format(endTime) +" Signatured verified! ^^");
            JOptionPane.showMessageDialog(null, "Signatured verified! ^^", "Verified!", JOptionPane.INFORMATION_MESSAGE);
            else
            //CommandLine.append("\n" + sdf.format(endTime) +" Signature doesn't match....");
            JOptionPane.showMessageDialog(null, "Signature doesn't match....", "Failed...", JOptionPane.INFORMATION_MESSAGE);

        }
        catch (IOException ex)
        {
            Logger.getLogger(DCrypto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_VerifyButtonActionPerformed

    private void EncryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptButtonActionPerformed
        // TODO add your handling code here:
        String algo = (String) SymAlgoComboBox.getSelectedItem();
        //Do muon mo rong key size len 256 thi phai add them policy, kha mat cong nen thoi, default la 128
        //String sessionKeySize = (String) SessionKeyComboBox.getSelectedItem();
        String sessionKeySize = "128";
        String mode = (String) ModOpComboBox.getSelectedItem();
        String padMode = (String) PadSchemeComboBox.getSelectedItem();
        String plainFile = InputFileField_Sym.getText();
        String cipherFile = OutputFileField_Sym.getText();
        String publicKeyString = PublicKeyTextArea.getText();

        if(publicKeyString == null)
        {
            JOptionPane.showMessageDialog(null, "Public key is null!!", "ERROR!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //boolean result = DCrypto.symEncryptFileAdvanced(mainPublicKey, algo, sessionKeySize, mode, padMode, plainFile, cipherFile);
        boolean result = DCrypto.symEncryptFileAdvanced(DCrypto.stringToPubKey(publicKeyString), algo, sessionKeySize, mode, padMode, plainFile, cipherFile);

        if (result == false)
        {

        }
    }//GEN-LAST:event_EncryptButtonActionPerformed

    private void PadSchemeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PadSchemeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PadSchemeComboBoxActionPerformed

    private void BrowseOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseOutputFileActionPerformed
        // TODO add your handling code here:
        //Handle open button action.
        if (evt.getSource() == BrowseOutputFile)
        {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(UserManager_GUI.this);

            if (returnVal == fc.APPROVE_OPTION)
            {
                File file = fc.getSelectedFile();
                OutputFileField_Sym.setText(file.getPath());
            }
            else
            {

            }
        }
    }//GEN-LAST:event_BrowseOutputFileActionPerformed

    private void BrowseInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseInputFileActionPerformed
        // TODO add your handling code here:
        //Handle open button action.
        if (evt.getSource() == BrowseInputFile)
        {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(UserManager_GUI.this);

            if (returnVal == fc.APPROVE_OPTION)
            {
                File file = fc.getSelectedFile();
                InputFileField_Sym.setText(file.getPath());
            }
            else
            {

            }
        }
    }//GEN-LAST:event_BrowseInputFileActionPerformed

    private void InputFileField_SymActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFileField_SymActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputFileField_SymActionPerformed

    private void OutputFileField_SymActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputFileField_SymActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputFileField_SymActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        try
        {
            // TODO add your handling code here:
            this.GetData(this.pathdir);
        }
        catch (SAXException | IOException | ParserConfigurationException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void AddContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddContactButtonActionPerformed
        try
        {
            // TODO add your handling code here:
            AddContact_GUI window = new AddContact_GUI(this.pathdir);
            window.setLocationRelativeTo(null);
            window.setVisible(true);
            this.GetData(this.pathdir);
        }
        catch (SAXException | IOException | ParserConfigurationException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddContactButtonActionPerformed

    private void UserTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserTableMousePressed
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt))
        {
            JTable source = (JTable)evt.getSource();
            int row = source.rowAtPoint( evt.getPoint() );
            //if (! source.isRowSelected(row))
            //source.changeSelection(row, column, false, false);

            //Lay columm 2, cot public key
            tempPubKey = (String) UserTable.getModel().getValueAt(row,2);
            //Columm cot 1 la email
            tempEmail = (String) UserTable.getModel().getValueAt(row,1);
            popUpMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_UserTableMousePressed

    private void UserTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_UserTableMouseClicked

    private void SaveKeyPairToAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveKeyPairToAccountActionPerformed
        try
        {
            // TODO add your handling code here:
            if(PublicKeyArea.getText().equals("") || PrivateKeyArea.getText().equals(""))
            {
                JOptionPane.showMessageDialog(null, "Please create your keypair first!", "ERROR!", JOptionPane.ERROR_MESSAGE);
            }

            mainPublicKey = DCrypto.stringToPubKey(PublicKeyArea.getText());
            mainPrivateKey = DCrypto.stringToPrivateKey(PrivateKeyArea.getText());
            mainKeyPair = new KeyPair(mainPublicKey,mainPrivateKey);

            //Lay thong tin cap khoa cua account nguoi dung
            RSAPublicKey tempPublicKey = (RSAPublicKey) mainPublicKey;
            KeySizeField1.setText(String.valueOf(tempPublicKey.getModulus().bitLength()));
            AlgorithmField1.setText(tempPublicKey.getAlgorithm());

            //Update thong tin private key cua user
            CommandLine_Sym1.setText(PrivateKeyArea.getText());
            KeyOwnerField1.setText(EmailTextField.getText());

            User user = new User();
            user.UpdateKey(EmailTextField.getText(),PublicKeyArea.getText(), PrivateKeyArea.getText());
            JOptionPane.showMessageDialog(null, "Your keypair has been saved!", "Updated", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (SAXException | IOException | ParserConfigurationException | TransformerException ex)
        {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveKeyPairToAccountActionPerformed

    private void CreateKeyPairButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateKeyPairButton1ActionPerformed
        // TODO add your handling code here:
        PublicKeyArea.setText("");
        PrivateKeyArea.setText("");
        int keySize = Integer.parseInt(KeySizeComboBox1.getSelectedItem().toString());

        KeyPair keyPair = DCrypto.createRSAKeyPair(keySize);
        PublicKeyArea.append(DCrypto.keyToString(keyPair.getPublic()));
        PrivateKeyArea.append(DCrypto.keyToString(keyPair.getPrivate()));
    }//GEN-LAST:event_CreateKeyPairButton1ActionPerformed

    private void KeySizeComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeySizeComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KeySizeComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.SetInf(this.pathdir);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void EmailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmailTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EmailTextFieldActionPerformed

    private void NameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameFieldActionPerformed

    private void UpdateAccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateAccButtonActionPerformed
        // TODO add your handling code here:
        Passphrase_GUI window = new Passphrase_GUI (this.EmailTextField.getText(), this.NameField.getText(), this.DoBTextField.getText(), this.PhoneTextField.getText(), this.AddrTextField.getText());
        window.setLocationRelativeTo(null);
        window.setVisible(true);
    }//GEN-LAST:event_UpdateAccButtonActionPerformed

    private void ExportInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportInfoButtonActionPerformed
        // TODO add your handling code here:
        String temp = this.EmailTextField.getText();
        JOptionPane.showMessageDialog(null, "Your account info has been exported.", "Exported", JOptionPane.PLAIN_MESSAGE);
        User user = new User();
        try
        {
            user.ExportInf(temp, temp + "\\UserInfo.xml");
        } catch (SAXException | IOException | ParserConfigurationException | TransformerException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ExportInfoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public void GetData(String pathdir) throws SAXException, IOException, ParserConfigurationException
    { 
        File file = new File(pathdir + "\\Database.xml"); 
        
        if (file.exists())
        {
            Vector header = new Vector();
            header.addElement("Name"); 
            header.addElement("Email"); 
            header.addElement("Public Key");
            header.addElement("Date Of Birth"); 
            header.addElement("Phone"); 
            header.addElement("Address");
            DefaultTableModel model = new DefaultTableModel(header, 0); 
            UserTable.setModel(model);
            //Create instance of DocumentBuilderFactory 
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 
            //Get the DocumentBuilder 
            DocumentBuilder docBuilder = factory.newDocumentBuilder(); 
            //Using existing XML Document 
            Document doc = docBuilder.parse(file); 

            Element rootNode = doc.getDocumentElement(); 

            NodeList list = rootNode.getElementsByTagName("User"); 

            for (int i = 0; i < list.getLength(); i++) 
            { 

                Vector row = new Vector();
                Element sv = (Element) list.item(i); 

                Element id = (Element) sv.getElementsByTagName("Name").item(0); 
                row.addElement(id.getTextContent()); 

                Element name = (Element) sv.getElementsByTagName("Email").item(0); 
                row.addElement(name.getTextContent()); 

                Element pubkey = (Element) sv.getElementsByTagName("PublicKey").item(0); 
                row.addElement(pubkey.getTextContent()); 

                Element dateofbirth = (Element) sv.getElementsByTagName("DateOfBirth").item(0); 
                row.addElement(dateofbirth.getTextContent()); 

                Element phone = (Element) sv.getElementsByTagName("Phone").item(0); 
                row.addElement(phone.getTextContent()); 

                Element add = (Element) sv.getElementsByTagName("Address").item(0); 
                row.addElement(add.getTextContent()); 

                model.addRow(row); 
            }
        }
        else
        {
            Vector header = new Vector();
            header.addElement("Name"); 
            header.addElement("Email"); 
            header.addElement("Public Key");
            header.addElement("Date Of Birth"); 
            header.addElement("Phone"); 
            header.addElement("Address");
            DefaultTableModel model = new DefaultTableModel(header, 0); 
            UserTable.setModel(model); 
        }
    }
    
    public void SetInf (String path)
    {
        try {
            String filepath = path + "\\UserInfo.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);

            Node Data = doc.getFirstChild();
            NodeList nList = doc.getElementsByTagName("User");

            for (int i = 0; i < nList.getLength(); i++) 
            {
                Node nNode = nList.item(i);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) 
                {
                    Element eElement = (Element) nNode;
                    this.NameField.setText(eElement.getElementsByTagName("Name").item(0).getTextContent());
                    this.EmailTextField.setText(eElement.getElementsByTagName("Email").item(0).getTextContent());
                    this.DoBTextField.setText(eElement.getElementsByTagName("DateOfBirth").item(0).getTextContent());
                    this.PhoneTextField.setText(eElement.getElementsByTagName("Phone").item(0).getTextContent());
                    this.AddrTextField.setText(eElement.getElementsByTagName("Address").item(0).getTextContent());
                    
                    //Nap thong tin keypair cua account nay tu file len
                    String tempStringPub, tempStringPrivate;
                    tempStringPub = eElement.getElementsByTagName("PublicKey").item(0).getTextContent();
                    tempStringPrivate = eElement.getElementsByTagName("PrivateKey").item(0).getTextContent();
                    if(!tempStringPub.equals(""))
                    {
                        mainPublicKey = DCrypto.stringToPubKey(tempStringPub);
                        PublicKeyArea.setText(tempStringPub);
                    }
                    if(!tempStringPrivate.equals(""))
                    {
                        mainPrivateKey = DCrypto.stringToPrivateKey(tempStringPrivate);
                        PrivateKeyArea.setText(tempStringPrivate);
                        //Lay thong tin cap khoa cua account nguoi dung
                        RSAPrivateKey tempPrivateKey = (RSAPrivateKey) mainPrivateKey;
                        KeySizeField1.setText(String.valueOf(tempPrivateKey.getModulus().bitLength()));
                        AlgorithmField1.setText(tempPrivateKey.getAlgorithm());
                        //Update thong tin private key cua user
                        CommandLine_Sym1.setText(PrivateKeyArea.getText());
                        KeyOwnerField1.setText(EmailTextField.getText());
                    }
                }
            }
        } 
        catch (SAXException | IOException | ParserConfigurationException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManager_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManager_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManager_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManager_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        try 
        {
            //Java look and feel
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } 
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() {
                Users.GUI.Login_GUI window = new Users.GUI.Login_GUI(); 
                window.setLocationRelativeTo(null);
                window.setVisible(true);
//                while (window.result = true)
//                {
//                    window.setVisible(false);
//                }
//                if (window.result = true) 
//                {
//                    try {
//                        UserManager_GUI window2 = new UserManager_GUI(window.userNameField.getText());
//                    } catch (IOException ex) {
//                        Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
//                    } catch (ParserConfigurationException ex) {
//                        Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
//                    } catch (SAXException ex) {
//                        Logger.getLogger(UserManager_GUI.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
            }
        });
    }

    public String pathdir;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu About;
    private javax.swing.JPanel AccountInfo;
    private javax.swing.JPanel AccountPane;
    private javax.swing.JButton AddContactButton;
    private javax.swing.JLabel AddrLabel;
    private javax.swing.JTextField AddrTextField;
    private javax.swing.JTextField AlgorithmField;
    private javax.swing.JTextField AlgorithmField1;
    private javax.swing.JButton BrowseInputFile;
    private javax.swing.JButton BrowseInputFile1;
    private javax.swing.JButton BrowseOutputFile;
    private javax.swing.JButton BrowseOutputFile1;
    private javax.swing.JTextArea CommandLine_Sym1;
    private javax.swing.JPanel ContactsPane;
    private javax.swing.JButton CreateKeyPairButton1;
    private javax.swing.JPanel DecryptTab;
    private javax.swing.JMenuItem DeleteContact;
    private javax.swing.JButton DeleteUserButton;
    private javax.swing.JLabel DoBLabel;
    private javax.swing.JFormattedTextField DoBTextField;
    private javax.swing.JMenuItem EditContact;
    private javax.swing.JButton EditUserButton;
    private javax.swing.JLabel EmailLabel;
    private javax.swing.JTextField EmailTextField;
    private javax.swing.JButton EncryptButton;
    private javax.swing.JPanel EncryptTab;
    private javax.swing.JMenuItem ExportContactInfo;
    private javax.swing.JButton ExportInfoButton;
    private javax.swing.JPanel FileInfoPane;
    private javax.swing.JPanel FileInfoPane1;
    private javax.swing.JMenu Help;
    private javax.swing.JLabel HoTenLabel;
    private javax.swing.JTextField InputFileField_Sym;
    private javax.swing.JTextField InputFileField_Sym1;
    private javax.swing.JPanel KeyInfoPane;
    private javax.swing.JPanel KeyInfoPane1;
    private javax.swing.JTextField KeyOwnerField;
    private javax.swing.JTextField KeyOwnerField1;
    private javax.swing.JPanel KeyPairInfo;
    private javax.swing.JComboBox<String> KeySizeComboBox1;
    private javax.swing.JTextField KeySizeField;
    private javax.swing.JTextField KeySizeField1;
    private javax.swing.JButton LoadYourPrivateKey;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JComboBox<String> ModOpComboBox;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextField OutputFileField_Sym;
    private javax.swing.JTextField OutputFileField_Sym1;
    private javax.swing.JComboBox<String> PadSchemeComboBox;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JLabel PhoneLabel;
    private javax.swing.JTextField PhoneTextField;
    private javax.swing.JTextArea PrivateKeyArea;
    private javax.swing.JScrollPane PrivateKeyScrollPane;
    private javax.swing.JTextArea PublicKeyArea;
    private javax.swing.JScrollPane PublicKeyScrollPane;
    private javax.swing.JTextArea PublicKeyTextArea;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SaveKeyPairToAccount;
    private javax.swing.JScrollPane ScrollUserPane;
    private javax.swing.JPanel SessionKeyInfoPane;
    private javax.swing.JButton SignButton;
    private javax.swing.JComboBox<String> SymAlgoComboBox;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JButton UpdateAccButton;
    private javax.swing.JPanel UserOperationPane;
    private javax.swing.JTable UserTable;
    private javax.swing.JButton VerifyButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu popUpMenu;
    // End of variables declaration//GEN-END:variables
}